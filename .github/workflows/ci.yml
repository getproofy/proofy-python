name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  FORCE_COLOR: 1

jobs:
  lint-and-format:
    name: "Lint and Format Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Lint with ruff
        run: |
          echo "::group::Ruff check"
          uvx --from ruff==0.6.9 ruff check --output-format=github .
          echo "::endgroup::"

      - name: Format check with ruff
        run: |
          echo "::group::Ruff format check"
          uvx --from ruff==0.6.9 ruff format --check --diff .
          echo "::endgroup::"

  type-check:
    name: "Type Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Create venv and install dependencies with uv
        run: |
          uv venv .venv
          . .venv/bin/activate
          uv pip install -e './proofy-commons[dev]'
          uv pip install -e './pytest-proofy[dev]'
          uv pip install 'mypy==1.11.2'

      - name: Type check with mypy
        run: |
          echo "::group::Type checking (mypy with project config)"
          ./.venv/bin/python -m mypy \
            --config-file pyproject.toml \
            --install-types --non-interactive \
            proofy-commons/proofy \
            pytest-proofy/pytest_proofy
          echo "::endgroup::"

  test:
    name: "Test Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Reduce matrix for faster CI - focus on primary combinations
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e './proofy-commons[dev]'
          pip install -e './pytest-proofy[dev]'

      - name: Run proofy-commons tests
        run: |
          echo "::group::Testing proofy-commons"
          cd proofy-commons
          python -m pytest tests/ -v --tb=short
          echo "::endgroup::"

      - name: Run pytest-proofy tests
        run: |
          echo "::group::Testing pytest-proofy"
          cd pytest-proofy
          python -m pytest tests/ -v --tb=short -p no:proofy
          echo "::endgroup::"

  coverage:
    name: "Coverage Report"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e './proofy-commons[dev]'
          pip install -e './pytest-proofy[dev]'
          pip install coverage[toml]

      - name: Run tests with coverage
        run: |
          echo "::group::Coverage for proofy-commons"
          cd proofy-commons
          python -m coverage run -m pytest tests/
          python -m coverage report
          python -m coverage xml
          echo "::endgroup::"

          echo "::group::Coverage for pytest-proofy"
          cd ../pytest-proofy
          python -m coverage run -m pytest tests/ -p no:proofy
          python -m coverage report
          python -m coverage xml
          echo "::endgroup::"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./proofy-commons/coverage.xml,./pytest-proofy/coverage.xml
          fail_ci_if_error: false
          verbose: true

  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run bandit security scan
        run: |
          echo "::group::Bandit security scan"
          bandit -r proofy-commons/proofy pytest-proofy/pytest_proofy -f json -o bandit-report.json || true
          bandit -r proofy-commons/proofy pytest-proofy/pytest_proofy || true
          echo "::endgroup::"

      - name: Run safety dependency check
        run: |
          echo "::group::Safety dependency check"
          safety check --json --output safety-report.json || true
          safety check || true
          echo "::endgroup::"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: "*-report.json"
          retention-days: 30

  build-check:
    name: "Build Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build proofy-commons
        run: |
          echo "::group::Building proofy-commons"
          cd proofy-commons
          python -m build
          python -m twine check dist/*
          echo "::endgroup::"

      - name: Build pytest-proofy
        run: |
          echo "::group::Building pytest-proofy"
          cd pytest-proofy
          python -m build
          python -m twine check dist/*
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            proofy-commons/dist/
            pytest-proofy/dist/
          retention-days: 7

  all-checks-pass:
    name: "All Checks Pass"
    runs-on: ubuntu-latest
    needs:
      [lint-and-format, type-check, test, coverage, security-scan, build-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and format: ${{ needs.lint-and-format.result }}"
          echo "Type check: ${{ needs.type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Build check: ${{ needs.build-check.result }}"

          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.coverage.result }}" == "success" && \
                "${{ needs.build-check.result }}" == "success" ]]; then
            echo "✅ All critical checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi
